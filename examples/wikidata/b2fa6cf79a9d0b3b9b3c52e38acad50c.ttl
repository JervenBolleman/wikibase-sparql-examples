@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-b2fa6cf79a9d0b3b9b3c52e38acad50c> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Property_proposal/feminine_form>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "(L9670) king(L1380) queen(P5137)item for this sense (L34190) Gräfin"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX ontolex: <http://www.w3.org/ns/lemon/ontolex#>
PREFIX dct: <http://purl.org/dc/terms/>
SELECT ?l1 ?lemma1 ?sense1 ?gloss1 ?l2 ?lemma2 ?sense2 ?gloss2 WHERE {
  # Assuming that we have a given sense ?sense1 (here: L34190-S1),
  FILTER (?sense1 = wd:L34190-S1)

  # we are looking for a ?sense2 that has the same conceptualized meaning ?meaning,
  ?sense1 wdt:P5137 ?meaning.
  ?sense2 wdt:P5137 ?meaning.
  
  # but we don’t want the ?meaning to be the gender aspect of the sense.
  MINUS { 
    ?meaning wdt:P31 wd:Q48277, wd:Q48264
  }

  # We also want the ?sense2 to be about a lexeme in the same language
  ?l1 dct:language/^dct:language ?l2.
  # where ?l1 and ?l2 are the lexemes for the senses ?sense1 and ?sense2, respectively  
  ?sense1 ^ontolex:sense ?l1.
  ?sense2 ^ontolex:sense ?l2.
  # (Note that we would write the above three triples as the single line
  ?sense1 ^ontolex:sense/dct:language/^dct:language/ontolex:sense ?sense2.
  # but then we wouldn’t be binding lexemes ?l1 and ?l2, which we might want for debugging.)

  # And we don’t want ?sense2 to be identical to the original ?sense1
  FILTER (?sense2 != ?sense1)
                              
  # Finally, for debugging purposes, we’re binding the lemmas and glosses for ?sense1 and ?sense2
  ?l1 wikibase:lemma ?lemma1.
  ?sense1 skos:definition ?gloss1.
  ?l2 wikibase:lemma ?lemma2.
  ?sense2 skos:definition ?gloss2.
}
LIMIT 1""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?l1 ?lemma1 ?sense1 ?gloss1 ?l2 ?lemma2 ?sense2 ?gloss2 WHERE {
  # Assuming that we have a given sense ?sense1 (here: L34190-S1),
  FILTER (?sense1 = wd:L34190-S1)

  # we are looking for a ?sense2 that has the same conceptualized meaning ?meaning,
  ?sense1 wdt:P5137 ?meaning.
  ?sense2 wdt:P5137 ?meaning.
  
  # but we don’t want the ?meaning to be the gender aspect of the sense.
  MINUS { 
    ?meaning wdt:P31 wd:Q48277, wd:Q48264
  }

  # We also want the ?sense2 to be about a lexeme in the same language
  ?l1 dct:language/^dct:language ?l2.
  # where ?l1 and ?l2 are the lexemes for the senses ?sense1 and ?sense2, respectively  
  ?sense1 ^ontolex:sense ?l1.
  ?sense2 ^ontolex:sense ?l2.
  # (Note that we would write the above three triples as the single line
  ?sense1 ^ontolex:sense/dct:language/^dct:language/ontolex:sense ?sense2.
  # but then we wouldn’t be binding lexemes ?l1 and ?l2, which we might want for debugging.)

  # And we don’t want ?sense2 to be identical to the original ?sense1
  FILTER (?sense2 != ?sense1)
                              
  # Finally, for debugging purposes, we’re binding the lemmas and glosses for ?sense1 and ?sense2
  ?l1 wikibase:lemma ?lemma1.
  ?sense1 skos:definition ?gloss1.
  ?l2 wikibase:lemma ?lemma2.
  ?sense2 skos:definition ?gloss2.
}
LIMIT 1""";
  schema:target <https://query.wikidata.org/sparql> .
