@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-c72e46a7bf3ee21b0f89aa9535643a85> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ar>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/da>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/en>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/en-gb>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/he>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/hy>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ja>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/lb>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/nl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/pl>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ru>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/sv>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/szl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/tr>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/uk>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/zh>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "باللغة الطبيعية، هذا يقرأ:  . ?grandChild لديه طفل ?child، ?childباخ لديه طفل مرة أخرى، أقترح أن نختصر هذه الجملة الإنجليزية، ثم أريد أن أريك كيف تدعم سباركل اختصارا مشابها، لاحظ كيف لا نهتم بالطفل: لا نستخدم المتغير إلا للحديث عن الحفيد، يمكننا بالتالي اختصار الجملة إلى: . ?grandChildباخ لديه طفل لديه طفل ”))، بطريقة ما، يُعَد \"شخص ما\" متغيرا، ولكنه متغير خاص صالح فقط ضمن هذه الفقرة النسبية، وهو مصطلح لا نشير إليه صراحة (نحن نقول \"شخص ما يفعل هذا ويفعل ذلك\"، وليس \"شخص هل هذا هو وشخص ما يفعل ذلك\"، هذان \"شخصان\" مختلفان. ?grandChild شخص ما\": لا يهمنا من هو، ولكن يمكننا الرجوع إليهم لأننا قلنا \"شخص ما\" من \"\": هذا يبدأ بعلامة نسبية، وضمن تلك الفقرة النسبية يمكننا قول أشياء عن \"شخص ما\" (على سبيل المثال،منبدلا من قول من هو طفل باخ، نحن فقط نقول \"بسباركل، يمكن كتابة هذا على النحو التالي:"@ar,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@da,
    "In natural language, this reads:  . ?grandChild has a child ?child. ?childBach has a child Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to: . ?grandChildBach has as child someone who has a child ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone In SPARQL, this can be written as:"@en,
    "In natural language, this reads:  . ?grandChild has a child ?child. ?childBach has a child Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to: . ?grandChildBach has as child someone who has a child ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone In SPARQL, this can be written as:"@en-GB,
    "בשפה טבעית, המשמעות היא:  . ?grandChild יש ילד ?childל־‎. ?childלבאך יש ילד ‎גם כאן, אני מציע לקצר את המשפט הזה ואז ארצה להראות איך SPARQL תומך בקיצור דומה. בדרך הזאת לא ממש אכפת לנו מהצאצא: אנחנו לא משתמשים במשתנה למעט כדי לדבר על הנכד. לכן עלינו לקצר את המשפט הזה לכדי: . ?grandChildלבאך יש איזשהו ילד שיש לו ילד ‎”). למעשה, „איזשהו/מישהו” הוא משתנה, אך מיוחד שתקף רק בתוך פסוקית הזיקה הזאת וכזה שאנחנו לא פונים אליו במפורש (אנחנו מציינים ש„למישהו שהוא זה ועושה את זה”, לא „מישהו שהוא זה ומישהו שעושה את זה” - זה לא אותו „מישהו”). ?grandChild”: בכך פתחנו בפסוקית זיקה, ובתוך פסוקית הזיקה הזאת נוכל לציין דברים על „איזשהו/מישהו” (למשל: ש„יש להם ילד ‎שבמקום להגיד איזה ילד זה של באך, אנחנו פשוט מציינים „מישהו”: לא אכפת לנו מי הוא. אבל אפשר להתייחס אליהם בחזרה כיוון שאמרנו „איזשהו/מישהו ב־SPARQL אפשר לכתוב את זה בתור:"@he,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@hy,
    "自然言語に直せば、これは次のように読むことができます。  . ?grandChild has a child ?child. ?childBach has a child ここでも、上の文章を短縮することを提案します。その上で、SPARQLではどうしたら同様の省略をすることができるかお見せしたいと思います。子供に関心がない場合には、実際にはどうするか考えてみてください。孫のことを話すときにしか変数を使わない、というのが答えです。そこで上の文は次のように略すことができるはずです。 . ?grandChildBach has as child someone who has a child ” という風に。）ある意味で、 “someone” は変数なのです。ただしこの修飾節の中でのみ有効な特別な変数で、さらに、それに明示的に言及することはしない変数です（“someone who is this and does that” とは言いますが、“someone who is this and someone who does that” とは言いません。それだと someone は別々の違う「誰か」になるからです。） ?grandChildここではバッハの子供が誰かを言う代わりに、単に “someone” と言いました。それが誰であるかには関心がないからです。しかし someone 'who' と言っておくことで、それについて引き続き言及することができます。つまり関係節を作ることができ、その節の中で “someone” について何かをいうことができるということです。（たとえば、he or she “has a child SPARQLでは、これを次のように書くことができます。"@ja,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@lb,
    "In natuurlijke taal is dat:  . ?grandChild has a child ?child. ?childBach has a child Opnieuw stel ik voor dat we deze Engelse zin verkorten, en dan wil ik u laten zien hoe SPARQL een vergelijkbare afkorting ondersteunt. Let op dat we eigenlijk niet om het kind geven: we gebruiken de variabele niet, behalve om te praten over het kleinkind. We kunnen de zin verkorten tot: . ?grandChildBach has as child someone who has a child \"). Op een bepaalde manier is \"iemand\" een variabele, maar een speciale die alleen geldig is binnen deze relatieve clausule, en een waar we niet expliciet naar verwijzen (we zeggen \"iemand die dit is en dat doet\", niet \"iemand dat dit is en iemand die dat doet\" - dat zijn twee verschillende \"iemanden\"). ?grandChildIn plaats van te zeggen wie Bachs kind is, zeggen we gewoon \"iemand\": het maakt ons niet uit wie het is. Maar we kunnen terug naar hen, omdat we hebben gezegd \"iemand \"wie\": dit begint een relatieve clausule, en binnen die relatieve clausule kunnen we dingen zeggen over \"iemand\" (bijvoorbeeld dat ze \"een kind hebben In SPARQL kan dit worden geschreven als:"@nl,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@pl,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone  На языке SPARQL это может быть записано следующим образом:"@ru,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@sv,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@szl,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@tr,
    "In natural language, this reads:    . ?grandChild has a child ?child. ?childBach has a child   Once more, I propose that we abbreviate this English sentence, and then I want to show you how SPARQL supports a similar abbreviation. Observe how we actually don’t care about the child: we don’t use the variable except to talk about the grandchild. We could therefore abbreviate the sentence to:    . ?grandChildBach has as child someone who has a child   ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone   In SPARQL, this can be written as:"@uk,
    "在自然语言中对应：  ）。 ?grandChild）也有一个孩子（?child孩子（），这个 ?childBach有一个孩子（我们再来试试缩写这个查询。我们实际不关心中间的那个Bach的“孩子”，而只需要获取Bach的孙子/孙女。因此，我们不使用中间变量，可以将查询缩写为： ）。 ?grandChildBach的孩子有一个孩子（ ”). In a way, “someone” is a variable, but a special one that’s only valid within this relative clause, and one that we don’t explicitly refer to (we say “someone who is this and does that”, not “someone who is this and someone who does that” – that’s two different “someone”s). ?grandChild”: this starts a relative clause, and within that relative clause we can say things about “someone” (e.g., that they “have a child whoInstead of saying who Bach’s child is, we just say “someone”: we don’t care who it is. But we can refer back to them because we’ve said “someone  在SPARQL中这可以写为："@zh;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT ?grandChild ?grandChildLabel
WHERE
{
  wd:Q1339 wdt:P40 [ wdt:P40 ?grandChild ].
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\". }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?grandChild ?grandChildLabel
WHERE
{
  wd:Q1339 wdt:P40 [ wdt:P40 ?grandChild ].
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\". }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>;
  schema:target <https://query.wikidata.org/sparql> .
