@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-60526a3d4e1889497069e205654de0d0> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2020/08>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment ">, which might be the bottleneck. I tried https://query.wikidata.org/sparqlseem to time out, so I tried to develop a query where I can control how many items are send to SERVICE <"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT  ?redirect_from ?redirect_to  ?count

 
WHERE {
   { 
  SELECT (COUNT(DISTINCT(?file)) AS ?count) ?redirect_from  {
     ?file wdt:P180 ?redirect_from . 
  } GROUP BY ?redirect_from
  ORDER BY ASC(?count)
  LIMIT 50          
}.
  SERVICE <https://query.wikidata.org/sparql> {
      ?redirect_from owl:sameAs ?redirect_to .
      #FILTER( ?redirect_from != ?redirect_to  ) .
  }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT  ?redirect_from ?redirect_to  ?count

WITH { 
  SELECT (COUNT(DISTINCT(?file)) AS ?count) ?redirect_from  {
     ?file wdt:P180 ?redirect_from . 
  } GROUP BY ?redirect_from
  ORDER BY ASC(?count)
  LIMIT 50          
} AS %values
 
WHERE {
  INCLUDE %values .
  SERVICE <https://query.wikidata.org/sparql> {
      ?redirect_from owl:sameAs ?redirect_to .
      #FILTER( ?redirect_from != ?redirect_to  ) .
  }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <https://query.wikidata.org/sparql>;
  schema:target <https://query.wikidata.org/sparql> .
