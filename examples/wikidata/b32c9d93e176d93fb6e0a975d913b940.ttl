@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-b32c9d93e176d93fb6e0a975d913b940> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/en>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/es>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/fr>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/hy>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/ja>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/nl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/sv>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/tr>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/uk>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/advanced/zh>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment """Combine the Wikidata Query Service and the Mediawiki API
#https://www.mediawiki.org/wiki/Wikidata_Query_Service/User_Manual/MWAPI
#(which is backed by Elasticsearch) to perform very fast searching of entities by their label.
#
#This query will first contact EntitySearch (an alias to wbsearchentities)
#which will pass the items with a label of \"soriano\" it found to the triple store
#which in turn can now query the graph in a timely manner and filter those entities that are not humans.
#This solution only works if the number of items returned by wbsearchentities remains reasonable.

SELECT ?item ?itemLabel WHERE {
  SERVICE wikibase:mwapi {
      bd:serviceParam wikibase:endpoint \"www.wikidata.org\";
        wikibase:api \"EntitySearch\";
        mwapi:search \"soriano\"; # Search for things named \"soriano\"
        mwapi:language \"en\".
      ?item wikibase:apiOutputItem mwapi:item.
  }
  MINUS {
    ?item wdt:P31 wd:Q5 . # but MINUS or negate any of those things that are instances of human
  }
  SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\".}
}
LIMIT 100"""@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX mwapi: <http://wikiba.se/ontology#>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX bd: <http://www.bigdata.com/rdf#>
#Combine the Wikidata Query Service and the Mediawiki API
#https://www.mediawiki.org/wiki/Wikidata_Query_Service/User_Manual/MWAPI
#(which is backed by Elasticsearch) to perform very fast searching of entities by their label.
#
#This query will first contact EntitySearch (an alias to wbsearchentities)
#which will pass the items with a label of \"soriano\" it found to the triple store
#which in turn can now query the graph in a timely manner and filter those entities that are not humans.
#This solution only works if the number of items returned by wbsearchentities remains reasonable.

SELECT ?item ?itemLabel WHERE {
  SERVICE wikibase:mwapi {
      bd:serviceParam wikibase:endpoint \"www.wikidata.org\";
        wikibase:api \"EntitySearch\";
        mwapi:search \"soriano\"; # Search for things named \"soriano\"
        mwapi:language \"en\".
      ?item wikibase:apiOutputItem mwapi:item.
  }
  MINUS {
    ?item wdt:P31 wd:Q5 . # but MINUS or negate any of those things that are instances of human
  }
  SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\".}
}
LIMIT 100""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """#Combine the Wikidata Query Service and the Mediawiki API
#https://www.mediawiki.org/wiki/Wikidata_Query_Service/User_Manual/MWAPI
#(which is backed by Elasticsearch) to perform very fast searching of entities by their label.
#
#This query will first contact EntitySearch (an alias to wbsearchentities)
#which will pass the items with a label of \"soriano\" it found to the triple store
#which in turn can now query the graph in a timely manner and filter those entities that are not humans.
#This solution only works if the number of items returned by wbsearchentities remains reasonable.

SELECT ?item ?itemLabel WHERE {
  SERVICE wikibase:mwapi {
      bd:serviceParam wikibase:endpoint \"www.wikidata.org\";
        wikibase:api \"EntitySearch\";
        mwapi:search \"soriano\"; # Search for things named \"soriano\"
        mwapi:language \"en\".
      ?item wikibase:apiOutputItem mwapi:item.
  }
  MINUS {
    ?item wdt:P31 wd:Q5 . # but MINUS or negate any of those things that are instances of human
  }
  SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\".}
}
LIMIT 100""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>,
    <http://wikiba.se/ontology#mwapi>;
  schema:target <https://query.wikidata.org/sparql> .
