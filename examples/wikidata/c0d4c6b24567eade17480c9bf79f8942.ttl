@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-c0d4c6b24567eade17480c9bf79f8942> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/en>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/en-gb>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/he>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/hy>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ja>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/lb>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ru>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/sv>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/szl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/tr>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/zh>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "BIND, BOUND, IFThese three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.  clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A  clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable). \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression) can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@en,
    "BIND, BOUND, IFThese three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.  clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A  clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable). \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression) can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@en-GB,
    "BIND,‏ BOUND,‏ IF (איגוד, תיחום, ברירה)בשלוש יכולות אלו משתמשים בדרך כלל בשילוב זו עם זו, נתחיל בהסבר על שלושתן ואז נעבור לכמה דוגמאות.  אפשר להשתמש כדי להקצות את תוצאת הביטוי למשתנה (בדרך כלל משתנה חדש אבל אפשר גם לדרוס קיימים). ‪BIND(ביטוי AS ?variable).‬בפסוקית . OPTIONAL (שקר)). שימושי מאוד למשתנים שהוקמו על ידי פסוקית false (אמת) או true בודק אם משתנה תחום לערך (מחזיר BOUND(?variable). \"terrible\" יפוענח ל־IF(false, \"great\", \"terrible\"), ו־\"yes\" יפוענח ל־IF(true, \"yes\", \"no\"). כלומר, false מפוענח ל־condition אם elseExpression, ול־true (תנאי) מפוענח לכדי condition אם thenExpression מפוענח לכדי IF(condition,thenExpression,elseExpression) אפשר להשתמש כדי לאגד את תוצאות חלק מהחישוב למשתנה חדש. זאת יכולה להיות תוצאת ביניים של חישוב גדול יותר או פשוט תוצאה ישירות של השאילתה. למשל, כדי לאתר את גיל הנידונים לעונש מוות: BINDב־"@he,
    "BIND, BOUND, IF  These three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.    clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A    clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable)  . \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression)   can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@hy,
    "BIND、BOUND、IFこれらの3つの機能は、組み合わせて使用されることが多いので、最初に3つすべてを説明し、次にいくつかの例を示します。 句を使用して、式の結果を変数(通常は新しい変数ですが、既存の変数を上書きすることもできます)に割り当てることができます。 BIND(expression AS?variable).句で導入された変数に役立ちます。 OPTIONALを返します)。これは主に、falseまたはtrueは、変数が値にバインドされているかどうかをテストします(BOUND(?variable)と評価されます。 \"terrible\"はIF(false,\"great\",\"terrible\")と評価され、\"yes\"はIF(true,\"yes\",\"no\")と評価されます。 つまり、elseExpressionと評価された場合はfalseがconditionと評価され、thenExpressionと評価された場合はtrueがconditionは、IF(condition,thenExpression,elseExpression)は、いくつかの計算の結果を新しい変数にバインドするために使用できます。これは、より大きな計算の中間結果である場合もあれば、クエリの直接の結果である場合もあります。例えば、死刑の被害者の年齢を取得するには: BIND"@ja,
    "BIND, BOUND, IF  These three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.    clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A    clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable)  . \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression)   can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@lb,
    "BIND, BOUND, IF  These three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.    clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A    clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable)  . \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression)   can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@ru,
    "BIND, BOUND, IF  These three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.    clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A    clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable)  . \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression)   can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@sv,
    "BIND, BOUND, IF  These three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.    clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A    clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable)  . \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression)   can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@szl,
    "BIND, BOUND, IF  These three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.    clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A    clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable)  . \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression)   can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@tr,
    "BIND、BOUND、IF These three features are often used in conjunction, so I’ll first explain all three of them and then show you some examples.    clause can be used to assign the result of an expression to a variable (usually a new variable, but you can also overwrite existing ones). BIND(expression AS ?variable).A    clause. OPTIONAL). It’s mostly useful on variables that are introduced in an false or true tests if a variable has been bound to a value (returns BOUND(?variable)  . \"terrible\" evaluates to IF(false, \"great\", \"terrible\"), and \"yes\" evaluates to IF(true, \"yes\", \"no\"). That is, false evaluates to condition if elseExpression, and to true evaluates to condition if thenExpression evaluates to IF(condition,thenExpression,elseExpression)   can be used to bind the results of some calculation to a new variable. This can be an intermediate result of a larger calculation or just directly a result of the query. For example, to get the age of victims of capital punishment: BIND"@zh;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT ?person ?personLabel ?age
WHERE
{
  ?person wdt:P31 wd:Q5;
          wdt:P569 ?born;
          wdt:P570 ?died;
          wdt:P1196 wd:Q8454.
  BIND(?died - ?born AS ?ageInDays).
  BIND(?ageInDays/365.2425 AS ?ageInYears).
  BIND(FLOOR(?ageInYears) AS ?age).
  # or, as one expression:
  #BIND(FLOOR((?died - ?born)/365.2425) AS ?age).
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\". }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?person ?personLabel ?age
WHERE
{
  ?person wdt:P31 wd:Q5;
          wdt:P569 ?born;
          wdt:P570 ?died;
          wdt:P1196 wd:Q8454.
  BIND(?died - ?born AS ?ageInDays).
  BIND(?ageInDays/365.2425 AS ?ageInYears).
  BIND(FLOOR(?ageInYears) AS ?age).
  # or, as one expression:
  #BIND(FLOOR((?died - ?born)/365.2425) AS ?age).
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\". }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>;
  schema:target <https://query.wikidata.org/sparql> .
