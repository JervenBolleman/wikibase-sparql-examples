@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-1e062c8b1c7c43cf680d85e044132f63> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2020/05>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "TODO"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX schema: <http://schema.org/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT ?person ?personLabel ?fame ?birthPlace ?residence ?educatedAt ?workedAt
WHERE
{
  
{
  SELECT ?person ?fame ?birthPlace ?residence ?educatedAt (GROUP_CONCAT(DISTINCT ?placeLabel; SEPARATOR=\", \") AS ?workedAt)
  WHERE
  {
    
{
  SELECT ?person ?fame ?birthPlace ?residence (GROUP_CONCAT(DISTINCT ?placeLabel; SEPARATOR=\", \") AS ?educatedAt)
  WHERE
  {
    INCLUDE %get_residence
    OPTIONAL
    {
      ?person wdt:P69 ?place.
      ?place wdt:P131* wd:Q812.
      hint:Prior hint:gearing \"forward\".
    }
    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". ?place rdfs:label ?placeLabel. }
  }
  GROUP BY ?person ?fame ?birthPlace ?residence
}    OPTIONAL
    {
      ?person wdt:P937 ?place.
      ?place wdt:P131* wd:Q812.
      hint:Prior hint:gearing \"forward\".
    }
    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". ?place rdfs:label ?placeLabel. }
  }
  GROUP BY ?person ?fame ?birthPlace ?residence ?educatedAt
}  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }
}
ORDER BY DESC(?fame)""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?person ?personLabel ?fame ?birthPlace ?residence ?educatedAt ?workedAt
WITH
{
  SELECT DISTINCT ?person
  WHERE
  {
    ?person wdt:P31 wd:Q5. # Is human
    ?person (wdt:P19 | wdt:P551 | wdt:P037 | wdt:P69) / wdt:P131* wd:Q812. # Born/lived/worked/educated in Florida
    hint:Prior hint:gearing \"forward\". # Search the property chain above forward
    ?person wikibase:sitelinks ?fame
    FILTER (?fame > 35)
    OPTIONAL { ?person wdt:P570 ?date_of_death. }
    FILTER (! BOUND(?date_of_death)) # No date of death, i.e. living
  }
} AS %first_selection
WITH
{
  SELECT ?person (COUNT(?wikipedialink) AS ?fame)
  WHERE
  {
    INCLUDE %first_selection
    ?wikipedialink schema:isPartOf [ wikibase:wikiGroup \"wikipedia\" ]; schema:about ?person.
  }
  GROUP BY ?person
  HAVING (?fame > 35)
} AS %get_fame
WITH
{
  SELECT ?person ?fame (GROUP_CONCAT(DISTINCT ?placeLabel; SEPARATOR=\", \") AS ?birthPlace)
  WHERE
  {
    INCLUDE %get_fame
    OPTIONAL
    {
      ?person wdt:P19 ?place.
      ?place wdt:P131* wd:Q812.
      hint:Prior hint:gearing \"forward\".
    }
    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". ?place rdfs:label ?placeLabel. }
  }
  GROUP BY ?person ?fame
} AS %get_birthPlace
WITH
{
  SELECT ?person ?fame ?birthPlace (GROUP_CONCAT(DISTINCT ?placeLabel; SEPARATOR=\", \") AS ?residence)
  WHERE
  {
    INCLUDE %get_birthPlace
    OPTIONAL
    {
      ?person wdt:P551 ?place.
      ?place wdt:P131* wd:Q812.
      hint:Prior hint:gearing \"forward\".
    }
    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". ?place rdfs:label ?placeLabel. }
  }
  GROUP BY ?person ?fame ?birthPlace
} AS %get_residence
WITH
{
  SELECT ?person ?fame ?birthPlace ?residence (GROUP_CONCAT(DISTINCT ?placeLabel; SEPARATOR=\", \") AS ?educatedAt)
  WHERE
  {
    INCLUDE %get_residence
    OPTIONAL
    {
      ?person wdt:P69 ?place.
      ?place wdt:P131* wd:Q812.
      hint:Prior hint:gearing \"forward\".
    }
    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". ?place rdfs:label ?placeLabel. }
  }
  GROUP BY ?person ?fame ?birthPlace ?residence
} AS %get_educatedAt
WITH
{
  SELECT ?person ?fame ?birthPlace ?residence ?educatedAt (GROUP_CONCAT(DISTINCT ?placeLabel; SEPARATOR=\", \") AS ?workedAt)
  WHERE
  {
    INCLUDE %get_educatedAt
    OPTIONAL
    {
      ?person wdt:P937 ?place.
      ?place wdt:P131* wd:Q812.
      hint:Prior hint:gearing \"forward\".
    }
    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". ?place rdfs:label ?placeLabel. }
  }
  GROUP BY ?person ?fame ?birthPlace ?residence ?educatedAt
} AS %get_workedAt
WHERE
{
  INCLUDE %get_workedAt
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }
}
ORDER BY DESC(?fame)""";
  schema:target <https://query.wikidata.org/sparql> .
