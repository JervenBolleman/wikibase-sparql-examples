@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-0f2779a3f57a319814766f7b40139d92> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/ar>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/be-tarask>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/ca>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/cs>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/da>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/de>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/en>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/en-gb>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/eo>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/es>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/eu>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/fr>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/he>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/hy>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/id>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/it>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/ja>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/ko>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/lb>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/lt>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/ms>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/nl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/pl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/pt-br>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/ro>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/ru>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/si>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/sv>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/th>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/tr>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/uk>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/vec>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples/zh>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "TODO"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT ?awardCount ?award ?awardLabel WHERE {
  {
    SELECT (COUNT(?award) AS ?awardCount) ?award
    WHERE
    {
      {
        SELECT (SAMPLE(?human) AS ?human) ?award ?awardWork (SAMPLE(?director) AS ?director) (SAMPLE(?awardEdition) AS ?awardEdition) (SAMPLE(?time) AS ?time) WHERE {
          ?award wdt:P31 wd:Q19020 .      # All items that are instance of(P31) of Academy awards (Q19020)
          {
            ?human p:P166 ?awardStat .              # Humans with an awarded(P166) statement
            ?awardStat ps:P166 ?award .        # ... that has any of the values of ?award
            ?awardStat pq:P805 ?awardEdition . # Get the award edition (which is \"subject of\" XXth Academy Awards)
            ?awardStat pq:P1686 ?awardWork . # The work they have been awarded for
            ?human wdt:P31 wd:Q5 .        # Humans
          } UNION {
            ?awardWork wdt:P31 wd:Q11424 . # Films
            ?awardWork p:P166 ?awardStat . # ... with an awarded(P166) statement
            ?awardStat ps:P166 ?award .        # ... that has any of the values of ?award
            ?awardStat pq:P805 ?awardEdition . # Get the award edition (which is \"subject of\" XXth Academy Awards)
          }
          OPTIONAL {
            ?awardEdition wdt:P585 ?time . # the \"point of time\" of the Academy Award
            ?awardWork wdt:P57 ?director .
          }
        }
        GROUP BY ?awardWork ?award # We only want every movie once for a category (a 'random' person is selected)
      }
    } GROUP BY ?award
    ORDER BY ASC(?awardCount)
  }
  SERVICE wikibase:label { # ... include the labels
    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],mul,en\" .
  }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?awardCount ?award ?awardLabel WHERE {
  {
    SELECT (COUNT(?award) AS ?awardCount) ?award
    WHERE
    {
      {
        SELECT (SAMPLE(?human) AS ?human) ?award ?awardWork (SAMPLE(?director) AS ?director) (SAMPLE(?awardEdition) AS ?awardEdition) (SAMPLE(?time) AS ?time) WHERE {
          ?award wdt:P31 wd:Q19020 .      # All items that are instance of(P31) of Academy awards (Q19020)
          {
            ?human p:P166 ?awardStat .              # Humans with an awarded(P166) statement
            ?awardStat ps:P166 ?award .        # ... that has any of the values of ?award
            ?awardStat pq:P805 ?awardEdition . # Get the award edition (which is \"subject of\" XXth Academy Awards)
            ?awardStat pq:P1686 ?awardWork . # The work they have been awarded for
            ?human wdt:P31 wd:Q5 .        # Humans
          } UNION {
            ?awardWork wdt:P31 wd:Q11424 . # Films
            ?awardWork p:P166 ?awardStat . # ... with an awarded(P166) statement
            ?awardStat ps:P166 ?award .        # ... that has any of the values of ?award
            ?awardStat pq:P805 ?awardEdition . # Get the award edition (which is \"subject of\" XXth Academy Awards)
          }
          OPTIONAL {
            ?awardEdition wdt:P585 ?time . # the \"point of time\" of the Academy Award
            ?awardWork wdt:P57 ?director .
          }
        }
        GROUP BY ?awardWork ?award # We only want every movie once for a category (a 'random' person is selected)
      }
    } GROUP BY ?award
    ORDER BY ASC(?awardCount)
  }
  SERVICE wikibase:label { # ... include the labels
    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],mul,en\" .
  }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>;
  schema:target <https://query.wikidata.org/sparql> .
