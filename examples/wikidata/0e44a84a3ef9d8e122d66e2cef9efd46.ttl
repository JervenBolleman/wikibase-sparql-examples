@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-0e44a84a3ef9d8e122d66e2cef9efd46> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/User:D1gggg/Wikidata_model_and_SPARQL>,
    <https://www.wikidata.org/wiki/User:TweetsFactsAndQueries/A_Guide_To_WDQS/Staging>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ar>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ca>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/da>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/de>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/en>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/en-gb>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/es>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/et>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/fr>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/he>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/hy>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/id>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/it>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ja>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/lb>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/nl>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/pl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/pt-br>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/ru>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/sv>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/szl>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/tr>, <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/uk>,
    <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/zh>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "FILTER .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  معلومات . true هي جملة يمكنك إدراجها في استعلام سباركل الخاص بك، حسنا، قم بتصفية النتائج، داخل الأقواس، يمكنك وضع أي تعبير من النوع المنطقي، ويتم استخدام تلك النتائج فقط التي يتم فيها إرجاع التعبير FILTER(condition).على سبيل المثال، للحصول على قائمة بجميع البشر الذين ولدوا في عام 2015; نحصل أولا على جميع البشر بتاريخ ميلادهم -"@ar,
    "FILTER. exemple, vegeu l'MINUS, podem utilitzar FILTER Per a una versió alternativa i, a vegades, més ràpida que Info  a l'expressió. cert és una clàusula que podem inserir a la nostra consulta d'SPARQL per a filtrar-ne els resultats. Dins del parèntesi hi podem posar qualsevol expressió de tipus booleà, i només mostrarà els valors que retornin FILTER(condition).Per exemple, per a tenir una llista de tots els humans nascuts l'any 2015, primer llistem tots els humans per la data de naixement –"@ca,
    "FILTER .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@da,
    "FILTER. Beispiel ansehen, siehe MINUS kannst du dir auch FILTER Als gelegentlich schnellere Alternative zu Info  angegeben wird, werden verwendet. true ist eine Klausel, die du in deine SPARQL-Abfrage einsetzen kannst, um die Ergebnisse zu filtern. Innerhalb der Klammern kannst du jeden booleschen Ausdruck angeben und nur die Ergebnisse, bei denen als Ergebnis des Ausdrucks FILTER(bedingung).Zum Beispiel müssen wir für eine Liste aller Menschen, die 2015 geboren wurden zunächst eine Liste aller Menschen mit ihrem Geburtsdatum erhalten –"@de,
    "FILTER are used. true is a clause you can insert into your SPARQL query to, well, filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@en,
    "FILTER. example, see MINUS, you might also look at FILTER For a sometimes faster alternative to Info  are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@en,
    "are used. true is a clause you can insert into your SPARQL query to, well, filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition)For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@en,
    "FILTER. example, see MINUS, you might also look at FILTER For a sometimes faster alternative to Info  are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@en-GB,
    "FILTER .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info . true es una cláusula que puedes insertar en tu consulta SPARQL para filtrar los resultados. Dentro de los paréntesis, puedes poner cualquier expresión de tipo booleano, y solo se utilizan aquellos resultados donde la expresión devuelve FILTER(condición).Por ejemplo, para obtener una lista de todos los seres humanos nacidos en 2015, primero necesitamos obtener a todos los seres humanos con su fecha de nacimiento."@es,
    "FILTER .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info  . tõene on lause, mida võid sisestada oma SPARQL-i päringusse, et filtreerida tulemusi. Sulgude sisse võid panna mistahes loogilise avaldise (mis tagastab kas \"tõene\" või \"väär\"). Kasutatakse ainult neid tulemusi, kus avaldis tagastab FILTER(tingimus). Näiteks, et saada nimekirja kõigist 2015. aastal sündinud inimestest, võtame kõigepealt kõik inimesed koos sünniajaga –"@et,
    "FILTER. exemple, voir cet MINUS, parfois plus rapide, vous pouvez utiliser FILTER Pour une alternative à Info  sont utilisés. true est une clause qu'on peut insérer dans une requête SPARQL pour filtrer les résultats. Dans les parenthèses, on peut mettre n'importe quelle expression booléenne, et seuls les résultats où l'expression renvoie FILTER(condition).). date of birthdayPar exemple, pour obtenir une liste de tous les êtres humains nés en 2015, nous cherchons d'abord tous les êtres humains avec leur date de naissance (« dob » :"@fr,
    "FILTER (סינון). דוגמה, הינה MINUS, אפשר לעיין ב־FILTER לחלופה שלעיתים היא מהירה יותר ל־מידע  יהיו בשימוש. אמת היא פסוקית שאפשר להוסיף לשאילתת ה־SPARQL שלך כדי לסנן את התוצאות. בתוך הסוגריים, אפשר להוסיף כל ביטוי מסוג בוליאני, ורק התוצאות בהן הביטוי מחזיר FILTER(condition).למשל, כדי לקבל רשימה של כל האנשים שנולדו ב־2015, קודם נמשוך את כל האנשים עם תאריך הלידה שלהם -"@he,
    "FILTER  .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@hy,
    "FILTER. contoh, lihat MINUS yang terkadang lebih cepat, Anda bisa juga melihat FILTER Untuk alternatif pengganti Info ) yang dikembalikan. true adalah klausa yang bisa kamu selipkan ke dalam kueri SPARQL untuk menyaring hasil eksekusi. Di dalam tanda kurung, kamu bisa menempatkan ekspresi bertipe boolean dan hanya hasil yang sesuai dengan ekspresi tersebut (evaluasi ekspresi menghasilkan FILTER(kondisi)Sebagai contoh, untuk mendapatkan daftar semua orang yang lahir di tahun 2015, pertama-tama kita cari dulu semuau manusia dan tanggal lahirnya –"@id,
    "FILTER .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info  sono usati. true è una clausola che puoi inserire nella query SPARQL per filtrare i risultati. All'interno delle parentesi puoi inserire qualsiasi espressione di tipo booleano e solo quei risultati in cui l'espressione restituisce FILTER(condizione).Ad esempio, per ottenere un elenco di tutti gli umani nati nel 2015, prima otteniamo tutti gli umani con la loro data di nascita –"@it,
    "FILTERを参照してください。 exampleを参照することもできます。MINUSに代わるより高速な方法として、FILTER 情報 を返す結果のみが使用されます。 trueは、結果をフィルタリングするためにSPARQLクエリに挿入できる句です。括弧内には、ブール型の任意の式を入れることができ、式がFILTER(condition).たとえば、2015年に生まれたすべての人間のリストを取得するには、まずすべての人間とその生年月日を取得します -"@ja,
    "FILTER  .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@lb,
    "FILTER. voorbeeld, zie MINUS, kunt u ook kijken naar FILTER Voor een soms sneller alternatief voor Info  is, worden gebruikt. true is een clausule die u in een SPARQL query kunt gebruiken om de resultaten te filteren. Binnen de haakjes kunt u elke expressie met een booleaans type plaatsen, alleen die resultaten waar de expressie FILTER(condition).Om bijvoorbeeld een lijst te krijgen van alle mensen die in 2015 zijn geboren, halen we eerst alle mensen met hun geboortedatum op"@nl,
    "FILTER  .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@pl,
    "FILTER. exemplo, veja MINUS, voce pode olhar também para a cláusula de FILTER Para uma alternativa que é algumas vezes mais rápida que o Info   são utilizados. verdadeiro é uma cláusula que pode ser inserida na busca SPARQL para, bem, filtrar os resultados. Dentro dos parenteses voce pode colocar qualquer expressão do tipo booleano, e apenas os resultados para os quais a expressão retorna  FILTER(condição). Por exemplo, para pegar uma lista de todos os humanos nascidos em 2015, primeiro vamos listar todos os humanos com suas datas de nascimento -"@pt-BR,
    "FILTER  .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Информация   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@ru,
    "FILTER  .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Information   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@sv,
    "FILTER  .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@szl,
    "FILTER  .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  Info   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@tr,
    "FILTER. приклад, див. MINUS є FILTER Іноді швидшою альтернативою для Інформація . true - це пункт, який ви можете вставити у свій SPARQL-запит, щоб фільтрувати результати. У круглих дужках ви можете помістити будь-який вираз булевого типу, і використовувати лише ті результати, в яких вираз повертає FILTER(condition). For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@uk,
    "筛选器 .example, see MINUS, you might also look at FILTERFor a sometimes faster alternative to  信息   are used. true is a clause you can insert into your SPARQL query to filter the results. Inside the parentheses, you can put any expression of boolean type, and only those results where the expression returns FILTER(condition).  For example, to get a list of all humans born in 2015, we first get all humans with their date of birth –"@zh;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT ?person ?personLabel ?dob
WHERE
{
  ?person wdt:P31 wd:Q5;
          wdt:P569 ?dob.
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } 
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?person ?personLabel ?dob
WHERE
{
  ?person wdt:P31 wd:Q5;
          wdt:P569 ?dob.
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } 
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>;
  schema:target <https://query.wikidata.org/sparql> .
