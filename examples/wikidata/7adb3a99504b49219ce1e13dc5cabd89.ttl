@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-7adb3a99504b49219ce1e13dc5cabd89> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Property_proposal/BBC_artist_ID>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "Motivation ]reply[10:18, 19 June 2019 (UTC)) talk (EurohunterProperty for artists included in BBC. This SPARQL query will generate links to both Musicbrainz and BBC Music for Basshunter ]reply[19:54, 24 June 2019 (UTC)) talk (Eurohunter: I didn't knew about it. You are right. How I can use it? Do you know examples? Piecesofuk@ ]reply[18:14, 24 June 2019 (UTC)) talk (Piecesofuk (P434)MusicBrainz artist ID . There is a third-party formatter URL for BBC Music on https://www.bbc.co.uk/blogs/bbcinternet/2008/07/bbc_music_artist_pages_beta.html I believe the BBC artist ID is identical to the MusicBrainz ID, see for example Oppose  ]reply[06:38, 20 June 2019 (UTC)) talk (David Support"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX p: <http://www.wikidata.org/prop/>
SELECT ?mb_URL ?bbc_URL WHERE {
  wd:Q383541 wdt:P434 ?mb_id .  # get BassHunter's MusicBrainz id
  
  # generate MusicBrainz URL
  wd:P434 p:P1630 ?stmt .
  ?stmt ps:P1630 ?mb_formatter .
  ?stmt pq:P137 wd:Q14005 .   # operator MusicBrainz
  BIND(IRI(REPLACE(?mb_id, '^(.+)$', ?mb_formatter)) AS ?mb_URL).
  
  # generate BBC Music URL
  wd:P434 p:P3303 ?stmt1 .
  ?stmt1 ps:P3303 ?mb_bbc_formatter .
  ?stmt1 pq:P137 wd:Q4834855 . # operator BBC Music
  BIND(IRI(REPLACE(?mb_id, '^(.+)$', ?mb_bbc_formatter)) AS ?bbc_URL).
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?mb_URL ?bbc_URL WHERE {
  wd:Q383541 wdt:P434 ?mb_id .  # get BassHunter's MusicBrainz id
  
  # generate MusicBrainz URL
  wd:P434 p:P1630 ?stmt .
  ?stmt ps:P1630 ?mb_formatter .
  ?stmt pq:P137 wd:Q14005 .   # operator MusicBrainz
  BIND(IRI(REPLACE(?mb_id, '^(.+)$', ?mb_formatter)) AS ?mb_URL).
  
  # generate BBC Music URL
  wd:P434 p:P3303 ?stmt1 .
  ?stmt1 ps:P3303 ?mb_bbc_formatter .
  ?stmt1 pq:P137 wd:Q4834855 . # operator BBC Music
  BIND(IRI(REPLACE(?mb_id, '^(.+)$', ?mb_bbc_formatter)) AS ?bbc_URL).
}""";
  schema:target <https://query.wikidata.org/sparql> .
