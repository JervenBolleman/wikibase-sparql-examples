@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-7c4f0677fb3cbc5d4a8a8cf5f303ea27> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Requests_for_permissions/Bot/Josh404Bot_3>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "TODO"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
SELECT ?item ?imdb ?tvdb ?random WHERE {
  # Items with either IMDb or TVDB IDs
  { ?item wdt:P4835 []. }
  UNION
  { ?item wdt:P345 []. }

  # P4983's type constraint
  VALUES ?classes {
    wd:Q15416
  }
  ?item (wdt:P31/(wdt:P279*)) ?classes.

  # Get IMDb and TVDB IDs
  OPTIONAL { ?item wdt:P345 ?imdb. }
  OPTIONAL { ?item wdt:P4835 ?tvdb. }

  # Exclude items that already have a TMDB TV ID
  OPTIONAL { ?item wdt:P4985 ?tmdb. }
  FILTER(!(BOUND(?tmdb)))

  # Generate random sorting key
  BIND(MD5(CONCAT(STR(?item), STR(RAND()))) AS ?random)
}
ORDER BY ?random
LIMIT 1000""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?item ?imdb ?tvdb ?random WHERE {
  # Items with either IMDb or TVDB IDs
  { ?item wdt:P4835 []. }
  UNION
  { ?item wdt:P345 []. }

  # P4983's type constraint
  VALUES ?classes {
    wd:Q15416
  }
  ?item (wdt:P31/(wdt:P279*)) ?classes.

  # Get IMDb and TVDB IDs
  OPTIONAL { ?item wdt:P345 ?imdb. }
  OPTIONAL { ?item wdt:P4835 ?tvdb. }

  # Exclude items that already have a TMDB TV ID
  OPTIONAL { ?item wdt:P4985 ?tmdb. }
  FILTER(!(BOUND(?tmdb)))

  # Generate random sorting key
  BIND(MD5(CONCAT(STR(?item), STR(RAND()))) AS ?random)
}
ORDER BY ?random
LIMIT 1000""";
  schema:target <https://query.wikidata.org/sparql> .
