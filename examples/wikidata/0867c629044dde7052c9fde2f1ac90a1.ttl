@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-0867c629044dde7052c9fde2f1ac90a1> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:WikiProject_Invasion_biology>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "Propertiesmaintained by WikiProject (P6104)author (P50)author name string (P2093)object named as (P1932)"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT
  (COUNT(?work) AS ?count) 
  ?author_name 
  (CONCAT(
      'https://tools.wmflabs.org/author-disambiguator/names_oauth.php?limit=5000&name=',
      ENCODE_FOR_URI(?author_name)) AS ?generic_resolver_url)
  (CONCAT(
      'https://author-disambiguator.toolforge.org/names_oauth.php?precise=0&doit=Look+for+author&limit=1000&filter=wdt%3AP6104+wd%3AQ56241615&filter_authors=1&name=',
      ENCODE_FOR_URI(?author_name)) AS ?specific_resolver_url)
WHERE {
   {
 
    SELECT DISTINCT ?author_name WHERE {
      { 
        SERVICE bd:sample { ?work wdt:P6104 wd:Q56241615 . bd:serviceParam bd:sample.limit 10000 }
        ?work wdt:P50 ?author .
        { ?author skos:altLabel ?author_name_. }
        UNION
        { ?author rdfs:label ?author_name_. }
        BIND(STR(?author_name_) AS ?author_name)
      }
      UNION
      {
        ?author_statement ps:P50 ?author;
          pq:P1932 ?author_name.
      }
    }
    LIMIT 2000 
}  ?work wdt:P2093 ?author_name. 
}

GROUP BY ?author_name
ORDER BY DESC (?count)""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT
  (COUNT(?work) AS ?count) 
  ?author_name 
  (CONCAT(
      'https://tools.wmflabs.org/author-disambiguator/names_oauth.php?limit=5000&name=',
      ENCODE_FOR_URI(?author_name)) AS ?generic_resolver_url)
  (CONCAT(
      'https://author-disambiguator.toolforge.org/names_oauth.php?precise=0&doit=Look+for+author&limit=1000&filter=wdt%3AP6104+wd%3AQ56241615&filter_authors=1&name=',
      ENCODE_FOR_URI(?author_name)) AS ?specific_resolver_url)
WITH {
 
    SELECT DISTINCT ?author_name WHERE {
      { 
        SERVICE bd:sample { ?work wdt:P6104 wd:Q56241615 . bd:serviceParam bd:sample.limit 10000 }
        ?work wdt:P50 ?author .
        { ?author skos:altLabel ?author_name_. }
        UNION
        { ?author rdfs:label ?author_name_. }
        BIND(STR(?author_name_) AS ?author_name)
      }
      UNION
      {
        ?author_statement ps:P50 ?author;
          pq:P1932 ?author_name.
      }
    }
    LIMIT 2000 
}
AS %name_strings
WHERE {
  INCLUDE %name_strings
  ?work wdt:P2093 ?author_name. 
}

GROUP BY ?author_name
ORDER BY DESC (?count)""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://www.bigdata.com/rdf#sample>;
  schema:target <https://query.wikidata.org/sparql> .
