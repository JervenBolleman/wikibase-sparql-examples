@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-952a2e10ed3f78c2fb817a279f19f45e> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2024/03>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "TODO"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX psv: <http://www.wikidata.org/prop/statement/value/>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT DISTINCT ?person ?personLabel  ?propertyLabel ?dob ?dod WHERE { 
  
  { {?item wdt:P179 wd:Q23733.
  ?item ?predicate ?person .} # item = things which are part of the series Seinfeld
                              # ?person is the object of a tripe within the item
  UNION
  {wd:Q23733 ?predicate ?person .} # some people are mentioned in the main Seinfeld item, so get them too
  ?person wdt:P31 wd:Q5 .          # person must be a human 
  ?property wikibase:directClaim ?predicate . # deal with direct claims only, get the property
  }  # do this bit first

  OPTIONAL {?person p:P569 ?statement         # get the date of birth
            OPTIONAL {?statement psv:P569 [   # deal with date precision issues
                wikibase:timePrecision ?precision ;
                wikibase:timeValue ?date_ ].
                BIND(IF(strlen(str(month(?date_)))=2,str(month(?date_)),concat(\"0\",str(month(?date_)))) as ?month) 
                BIND(IF(strlen(str(day(?date_)))=2,str(day(?date_)),concat(\"0\",str(day(?date_)))) as ?day) 
                BIND(IF(?precision=9,year(?date_),
                       IF(?precision=10,concat(str(year(?date_)),\":\",?month),
                         IF(?precision=11,concat(str(year(?date_)),\":\",?month,\":\",?day),\"\"))) as ?dob)
               }   
           }
  
  OPTIONAL {?person wdt:P570 ?dod . } # get the date of death; don't need to deal with date precision issues here b/c they're all precision=11
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } 
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT DISTINCT ?person ?personLabel  ?propertyLabel ?dob ?dod WHERE { 
  
  { {?item wdt:P179 wd:Q23733.
  ?item ?predicate ?person .} # item = things which are part of the series Seinfeld
                              # ?person is the object of a tripe within the item
  UNION
  {wd:Q23733 ?predicate ?person .} # some people are mentioned in the main Seinfeld item, so get them too
  ?person wdt:P31 wd:Q5 .          # person must be a human 
  ?property wikibase:directClaim ?predicate . # deal with direct claims only, get the property
  } hint:Prior hint:runFirst true. # do this bit first

  OPTIONAL {?person p:P569 ?statement         # get the date of birth
            OPTIONAL {?statement psv:P569 [   # deal with date precision issues
                wikibase:timePrecision ?precision ;
                wikibase:timeValue ?date_ ].
                BIND(IF(strlen(str(month(?date_)))=2,str(month(?date_)),concat(\"0\",str(month(?date_)))) as ?month) 
                BIND(IF(strlen(str(day(?date_)))=2,str(day(?date_)),concat(\"0\",str(day(?date_)))) as ?day) 
                BIND(IF(?precision=9,year(?date_),
                       IF(?precision=10,concat(str(year(?date_)),\":\",?month),
                         IF(?precision=11,concat(str(year(?date_)),\":\",?month,\":\",?day),\"\"))) as ?dob)
               }   
           }
  
  OPTIONAL {?person wdt:P570 ?dod . } # get the date of death; don't need to deal with date precision issues here b/c they're all precision=11
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } 
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>;
  schema:target <https://query.wikidata.org/sparql> .
