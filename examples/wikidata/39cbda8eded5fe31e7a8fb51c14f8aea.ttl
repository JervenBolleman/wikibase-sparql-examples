@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-39cbda8eded5fe31e7a8fb51c14f8aea> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/User:Mfchris84>, <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2022/06>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "Items with RISM-ID and deWikipedia excluding items which have Template:RISM set in deWiki already included. i am totally unsure, if my solution especially with bound() works well. My first idea to build this with two subqueries and substracting them with MINUS run into timeout. Template:Vorlage:RISM and sitelink to German Wikipedia and i want to exclude all the items which already have on their German Wikipedia page the template (P5504)RISM ID the following query should return items, which have the"@en,
    "Vorlage:RISMAbfrage aller Items mit RISM-ID und deWikipedia-Artikel auf deren Wikipedia-Seiten die Vorlage:RISM nicht gesetzt ist."@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX mwapi: <http://wikiba.se/ontology#>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX schema: <http://schema.org/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT DISTINCT ?item ?deWP ?rism (CONCAT(\"[[:Template:RISM]]\") AS ?VorlageRISM) WHERE {
  {
    SELECT ?item ?deWP ?rism  WHERE {
      ?item wdt:P5504 ?rism.
      ?deWP schema:about ?item;
        schema:isPartOf <https://de.wikipedia.org/>.
        OPTIONAL {
      SERVICE wikibase:mwapi {
     # in
     bd:serviceParam wikibase:endpoint \"de.wikipedia.org\";
                     wikibase:api \"Generator\";
                     mwapi:generator \"embeddedin\";
                     mwapi:geititle \"Vorlage:RISM\";
                     mwapi:geinamespace \"0\".
    
     # out
     ?rismItem wikibase:apiOutputItem mwapi:item.

    } 
    }
     
  }
  }
   FILTER(!bound(?rismItem))
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT DISTINCT ?item ?deWP ?rism (CONCAT(\"[[:Template:RISM]]\") AS ?VorlageRISM) WHERE {
  {
    SELECT ?item ?deWP ?rism  WHERE {
      ?item wdt:P5504 ?rism.
      ?deWP schema:about ?item;
        schema:isPartOf <https://de.wikipedia.org/>.
        OPTIONAL {
      SERVICE wikibase:mwapi {
     # in
     bd:serviceParam wikibase:endpoint \"de.wikipedia.org\";
                     wikibase:api \"Generator\";
                     mwapi:generator \"embeddedin\";
                     mwapi:geititle \"Vorlage:RISM\";
                     mwapi:geinamespace \"0\".
    
     # out
     ?rismItem wikibase:apiOutputItem mwapi:item.

    } 
    }
     
  }
  }
   FILTER(!bound(?rismItem))
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#mwapi>;
  schema:target <https://query.wikidata.org/sparql> .
