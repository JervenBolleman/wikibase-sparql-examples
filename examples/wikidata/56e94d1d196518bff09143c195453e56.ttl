@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-56e94d1d196518bff09143c195453e56> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2022/01>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "TODO"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX mwapi: <http://wikiba.se/ontology#>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX schema: <http://schema.org/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT ?P18_value ?contentUrl
WHERE
{
  SERVICE <https://query.wikidata.org/sparql>
  {
    SERVICE wikibase:mwapi
    {
      bd:serviceParam wikibase:endpoint \"commons.wikipedia.org\" .
      bd:serviceParam wikibase:api \"Generator\" .
      bd:serviceParam mwapi:generator \"categorymembers\" .
      bd:serviceParam mwapi:gcmtitle \"Category:Portraits of men with moustaches\" .
      bd:serviceParam mwapi:gcmlimit \"max\" .
      bd:serviceParam mwapi:gcmnamespace \"6\" .
      ?category_member wikibase:apiOutput mwapi:title.
    }
    BIND (SUBSTR(STR(?category_member), 6) AS ?filename)
    BIND (URI(CONCAT(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", ENCODE_FOR_URI(?filename))) AS ?P18_value)
    OPTIONAL { ?stm ps:P18 ?P18_value . }
    FILTER BOUND (?stm)
    BIND (REPLACE(?filename, \" \", \"_\") AS ?filename_)
    BIND (MD5(?filename_) AS ?MD5)
    BIND (URI(CONCAT(\"https://upload.wikimedia.org/wikipedia/commons/\",
                     SUBSTR(?MD5, 1, 1), \"/\",
                     SUBSTR(?MD5, 1, 2), \"/\", ENCODE_FOR_URI(?filename_)
                    )
             ) AS ?contentUrl)
  }
  FILTER NOT EXISTS { ?file schema:contentUrl ?contentUrl . }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?P18_value ?contentUrl
WHERE
{
  SERVICE <https://query.wikidata.org/sparql>
  {
    SERVICE wikibase:mwapi
    {
      bd:serviceParam wikibase:endpoint \"commons.wikipedia.org\" .
      bd:serviceParam wikibase:api \"Generator\" .
      bd:serviceParam mwapi:generator \"categorymembers\" .
      bd:serviceParam mwapi:gcmtitle \"Category:Portraits of men with moustaches\" .
      bd:serviceParam mwapi:gcmlimit \"max\" .
      bd:serviceParam mwapi:gcmnamespace \"6\" .
      ?category_member wikibase:apiOutput mwapi:title.
    }
    BIND (SUBSTR(STR(?category_member), 6) AS ?filename)
    BIND (URI(CONCAT(\"http://commons.wikimedia.org/wiki/Special:FilePath/\", ENCODE_FOR_URI(?filename))) AS ?P18_value)
    OPTIONAL { ?stm ps:P18 ?P18_value . }
    FILTER BOUND (?stm)
    BIND (REPLACE(?filename, \" \", \"_\") AS ?filename_)
    BIND (MD5(?filename_) AS ?MD5)
    BIND (URI(CONCAT(\"https://upload.wikimedia.org/wikipedia/commons/\",
                     SUBSTR(?MD5, 1, 1), \"/\",
                     SUBSTR(?MD5, 1, 2), \"/\", ENCODE_FOR_URI(?filename_)
                    )
             ) AS ?contentUrl)
  }
  FILTER NOT EXISTS { ?file schema:contentUrl ?contentUrl . }
}""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#mwapi>,
    <https://query.wikidata.org/sparql>;
  schema:target <https://query.wikidata.org/sparql> .
