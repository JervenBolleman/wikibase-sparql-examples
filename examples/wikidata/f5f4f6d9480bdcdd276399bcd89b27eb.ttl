@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-f5f4f6d9480bdcdd276399bcd89b27eb> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial/pl>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "ORDER and LIMIT  We return to our regular scheduled program of more SPARQL features.    in some way, and then we care about the first few results (those with the best rank). rankedSo far, we’ve only had queries where we were interested in all results. But it’s quite common to care only about a few results: those that are most extreme in some way – oldest, youngest, earliest, latest, highest population, lowest melting point, most children, most materials used, and so on. The common factor here is that the results are   . LIMIT and ORDER BY block (after the braces, not inside!): WHERE {}This is controlled by two clauses, which are appended to the   .) something is equivalent to just ASC(something)ending). (If you don’t specify either, the default is ascending sort, so descending or asc to specify the sorting order (DESC() or ASC()), but we’ll see some other kinds later. This expression can also be wrapped in either ?something can be any expression – for now, the only kind of expression we know are simple variables (something. something sorts the results by ORDER BY something   only returns a single result. LIMIT 1 limits the query to ten results. LIMIT 10 is any natural number. For example, count results, where count cuts off the result list at LIMIT count   can significantly speed up the query, since WDQS can stop searching for results as soon as it’s found enough to fill the limit.) LIMIT result, but don’t care about which one. In either case, adding the some. In this case, the results aren’t sorted, so you don’t have any guarantee which results you’ll get. Which is fine if you happen to know that there’s only a certain number of results, or you’re just interested in ORDER BY without LIMIT(You can also use    clauses. LIMIT and ORDER BY.) You can start by searching for countries with their population, and then add the P:P1082, and the property for population is (Q3624078)sovereign state Exercise time! Try to write a query that returns the ten most populous countries. (A country is a   Here’s my solution:"@pl;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT ?country ?countryLabel ?population
WHERE
{
  ?kraj wdt:P31/wdt:P279* wd:Q3624078;
           wdt:P1082 ?populacja.
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }
}
ORDER BY DESC(?population)
LIMIT 10""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?country ?countryLabel ?population
WHERE
{
  ?kraj wdt:P31/wdt:P279* wd:Q3624078;
           wdt:P1082 ?populacja.
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }
}
ORDER BY DESC(?population)
LIMIT 10""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>;
  schema:target <https://query.wikidata.org/sparql> .
