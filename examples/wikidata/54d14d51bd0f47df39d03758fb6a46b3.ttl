@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-54d14d51bd0f47df39d03758fb6a46b3> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2020/02>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "02:17, 4 February 2020 (UTC)) talk (Dipsacus fullonum) 00:03, 4 February 2020 (UTC) â€“ Somehow I overlooked the conversion to xsd:integer so that isn't a problem. --talk (Dipsacus fullonum --BTW. The sorting of item numbers as strings is bad. It will give Q9 > Q80 > Q700 > Q6000 etc. 23:56, 3 February 2020 (UTC)) talk (Dipsacus fullonumIt is also possible to add a search for use in references. --Below is code to show the most recent items and lexemes which use P4970 in statements, qualifiers and references (up to 10 of each):"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX pr: <http://www.wikidata.org/prop/reference/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
SELECT ?type ?item ?property
WHERE
{
  {
    SELECT (\"Item\" as ?type) ?item
    WHERE
    {
      ?item wdt:P4970 [] .
      FILTER(SUBSTR(STR(?item),32,1) = \"Q\")
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
  UNION
  {
    SELECT (\"Lexeme\" as ?type) ?item
    WHERE
    {
      ?item wdt:P4970 [] .
      FILTER(SUBSTR(STR(?item),32,1) = \"L\")
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
  UNION
  {
    SELECT (\"Qualifier\" as ?type) ?item ?property
    WHERE
    {
      ?item ?property [pq:P4970 [] ].
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
  UNION
  {
    SELECT (\"Reference\" as ?type) ?item ?property
    WHERE
    {
      ?item ?property _:statement.
      _:statement prov:wasDerivedFrom _:refnode.
      _:refnode  pr:P4970 _:ref.
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
}
ORDER BY ?type DESC(xsd:integer(SUBSTR(STR(?item),33)))""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT ?type ?item ?property
WHERE
{
  {
    SELECT (\"Item\" as ?type) ?item
    WHERE
    {
      ?item wdt:P4970 [] .
      FILTER(SUBSTR(STR(?item),32,1) = \"Q\")
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
  UNION
  {
    SELECT (\"Lexeme\" as ?type) ?item
    WHERE
    {
      ?item wdt:P4970 [] .
      FILTER(SUBSTR(STR(?item),32,1) = \"L\")
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
  UNION
  {
    SELECT (\"Qualifier\" as ?type) ?item ?property
    WHERE
    {
      ?item ?property [pq:P4970 [] ].
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
  UNION
  {
    SELECT (\"Reference\" as ?type) ?item ?property
    WHERE
    {
      ?item ?property _:statement.
      _:statement prov:wasDerivedFrom _:refnode.
      _:refnode  pr:P4970 _:ref.
    }
    ORDER BY DESC(xsd:integer(SUBSTR(STR(?item),33)))
    LIMIT 10
  }
}
ORDER BY ?type DESC(xsd:integer(SUBSTR(STR(?item),33)))""";
  schema:target <https://query.wikidata.org/sparql> .
