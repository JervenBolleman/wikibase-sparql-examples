@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-105024786d87fde7bd9457e3ba8ca965> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/Wikidata:Request_a_query/Archive/2018/02>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "List of episodes of TV series. There is some trick to have data only from latter and avoid two row for the same episode? (Q3468580)Star Trek: Deep Space Nine, season 2  and at the same time is part of (Q7750266)The Maquis  are reported 2 time because the episode is part of (Q42600893)The Maquis, Part II  and 21 (Q42600888)The Maquis, Part I . In the result the episodes number 20 (Q21664088)two-part episode With this query I can extract all the episode of TV series or season, the problem is with"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT distinct ?serie ?serieLabel ?season ?seasonLabel ?seasonN2 ?episode ?episodeLabel ?episodeN ?seasonN ?prev ?next ?imdb ?date WHERE {
  ?episode wdt:P31 wd:Q21191270 .
  ?episode wdt:P179 wd:Q108774.
  ?episode wdt:P179 ?serie.
  ?episode wdt:P361 wd:Q3468580.
  ?episode wdt:P361 ?season.
  OPTIONAL {?episode wdt:P1191 ?date .}
  OPTIONAL {?episode wdt:P345 ?imdb .}
  OPTIONAL {?episode wdt:P155 ?prev.}
  OPTIONAL {?episode wdt:P156 ?next.}
  
  ?episode p:P179 ?statement .
  ?statement pq:P1545 ?episodeN .
  
  ?episode p:P361 ?statement2 .
  OPTIONAL {?statement2 pq:P1545 ?seasonN .}
  
  OPTIONAL {?season p:P179 ?statementSeason .}
  OPTIONAL {?statementSeason pq:P1545 ?seasonN2 .}
  
  OPTIONAL {?season wdt:P31 ?istance .}
  FILTER (?istance = wd:Q3464665) .
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }
}
ORDER BY  ?serie xsd:integer(?seasonN2) xsd:integer(?episodeN)""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """SELECT distinct ?serie ?serieLabel ?season ?seasonLabel ?seasonN2 ?episode ?episodeLabel ?episodeN ?seasonN ?prev ?next ?imdb ?date WHERE {
  ?episode wdt:P31 wd:Q21191270 .
  ?episode wdt:P179 wd:Q108774.
  ?episode wdt:P179 ?serie.
  ?episode wdt:P361 wd:Q3468580.
  ?episode wdt:P361 ?season.
  OPTIONAL {?episode wdt:P1191 ?date .}
  OPTIONAL {?episode wdt:P345 ?imdb .}
  OPTIONAL {?episode wdt:P155 ?prev.}
  OPTIONAL {?episode wdt:P156 ?next.}
  
  ?episode p:P179 ?statement .
  ?statement pq:P1545 ?episodeN .
  
  ?episode p:P361 ?statement2 .
  OPTIONAL {?statement2 pq:P1545 ?seasonN .}
  
  OPTIONAL {?season p:P179 ?statementSeason .}
  OPTIONAL {?statementSeason pq:P1545 ?seasonN2 .}
  
  OPTIONAL {?season wdt:P31 ?istance .}
  FILTER (?istance = wd:Q3464665) .
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }
}
ORDER BY  ?serie xsd:integer(?seasonN2) xsd:integer(?episodeN)""";
  <https://purl.expasy.org/sparql-examples/ontology#federatesWith> <http://wikiba.se/ontology#label>;
  schema:target <https://query.wikidata.org/sparql> .
