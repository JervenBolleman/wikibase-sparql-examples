@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

<https://www.wikidata.org#query-25e0e7d496aa6ab7f60b9e6751281fcc> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  dcterms:isPartOf <https://www.wikidata.org/wiki/User:Jobu0101/API>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  rdfs:comment "TODO"@en;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  sh:select """PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX v: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>

SELECT (MIN(?publication) AS ?aired) ?case ?ordinal ?film ?title (GROUP_CONCAT(DISTINCT(?screenwriter);separator=\", \") AS ?screenwriters) (GROUP_CONCAT(DISTINCT(?director);separator=\", \") AS ?directors) (SAMPLE(?runtime) AS ?runtime) (SAMPLE(?imdb) AS ?imdb) WHERE {
	?film p:P179 ?series . ?series v:P179 wd:Q689438 . ?series pq:P1545 ?ordinal .
    ?film p:P179 ?batic . ?batic v:P179 wd:Q110737643 . ?batic pq:P1545 ?case .
    ?film wdt:P1476 ?title
    OPTIONAL{?film wdt:P57 ?dir . ?dir rdfs:label ?director .  FILTER(lang(?director) = \"de\")}
    OPTIONAL{?film wdt:P58 ?screen . ?screen rdfs:label ?screenwriter .  FILTER(lang(?screenwriter) = \"de\")}
    OPTIONAL{?film wdt:P345 ?imdb}
  	OPTIONAL{?film wdt:P577 ?publication}
    OPTIONAL{?film wdt:P2047 ?runtime}
}
GROUP BY ?film ?title ?ordinal ?case
ORDER BY ASC(xsd:integer(?ordinal))""";
  <https://purl.expasy.org/sparql-examples/ontology#bigdata_query> """PREFIX p: <http://www.wikidata.org/prop/>
PREFIX v: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>

SELECT (MIN(?publication) AS ?aired) ?case ?ordinal ?film ?title (GROUP_CONCAT(DISTINCT(?screenwriter);separator=\", \") AS ?screenwriters) (GROUP_CONCAT(DISTINCT(?director);separator=\", \") AS ?directors) (SAMPLE(?runtime) AS ?runtime) (SAMPLE(?imdb) AS ?imdb) WHERE {
	?film p:P179 ?series . ?series v:P179 wd:Q689438 . ?series pq:P1545 ?ordinal .
    ?film p:P179 ?batic . ?batic v:P179 wd:Q110737643 . ?batic pq:P1545 ?case .
    ?film wdt:P1476 ?title
    OPTIONAL{?film wdt:P57 ?dir . ?dir rdfs:label ?director .  FILTER(lang(?director) = \"de\")}
    OPTIONAL{?film wdt:P58 ?screen . ?screen rdfs:label ?screenwriter .  FILTER(lang(?screenwriter) = \"de\")}
    OPTIONAL{?film wdt:P345 ?imdb}
  	OPTIONAL{?film wdt:P577 ?publication}
    OPTIONAL{?film wdt:P2047 ?runtime}
}
GROUP BY ?film ?title ?ordinal ?case
ORDER BY ASC(xsd:integer(?ordinal))""";
  schema:target <https://query.wikidata.org/sparql> .
